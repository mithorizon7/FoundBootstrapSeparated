Plan to Atomize the Eight Bootcamp Activities
Remove Cross-Phase Content Dependencies
To make each activity fully standalone, we need to eliminate all references to previous phases in the instructions and prompts. Currently, many phases assume outputs from earlier ones. We should:
•	Rewrite Instructions and Intros: Remove or reword any text that mentions completing a prior phase or using its results. For example, Phase 4’s intro explicitly references having done Phases 1–3[1]. Change this to a general context statement (e.g. “Assuming you have some market insights and research, now you'll generate product concepts...”) instead of “up to now, you've done X, Y, Z.” Likewise, eliminate phrases like “from your Phase 1 report” in tooltips and decision boxes[2], replacing them with generic wording (“from your market research” or similar). Each phase’s instructions should make sense on its own.
•	Remove Cross-Phase Placeholder Usage: Update the prompt templates to stop pulling data from earlier phases. For example, Phase 2’s prompt uses {{phase1.company_name}} and {{phase1.sector}}[3], and Phase 3’s uses {{phase1...}} and {{phase2...}} placeholders[4]. These should be replaced with placeholders for data provided within the same phase. In other words, phase prompts should no longer reference phaseN.someField from a different activity. If certain context is crucial (company name, core benefit, etc.), we will gather it in the current phase (see next section). Any mention of previous-phase outputs in the prompt text itself should be made optional or removed (e.g. Phase 2’s prompt could say “create a matrix for your company in your sector” using local inputs, and omit assuming an attached Phase1 PDF unless the user provides one).
•	Generalize or Drop Specific References: If a phase’s task inherently builds on a prior output, adjust it to work with generic inputs. For example, Phase 2 originally says “Using the attached Market_Competitors.pdf” (the Phase 1 output)[3]. For independence, change this to “Using your market research (if available)” or simply instruct the user to use their knowledge of competitors. The goal is to allow the activity to proceed even if the specific PDF from Phase 1 isn’t present. Similarly, Phase 4’s Task 1 asks for citing a macro trend from Phase 1; we can instead say “citing a relevant macro trend in the market” (so the AI/user can supply any known trend rather than a Phase1-specific item). These edits ensure no one must have done a previous exercise to understand or execute the current one.
Add Required Fields to Each Activity
Each phase must collect all information it needs on its own, since it can’t rely on prior phases’ stored data. We will introduce new form fields into later phases to capture inputs that were previously coming from earlier activities:
•	Company Name & Sector in Phase 2: Phase 2 needs the company name and sector for its prompt (originally pulled from Phase 1)[3]. We should add “Company Name” and “Sector” fields to Phase 2’s form. Then modify Phase 2’s promptTemplate to use these (e.g. {{company_name}} and {{sector}}) instead of phase1.company_name/sector. This way, a user starting at Phase 2 can input their venture’s name and industry on the spot.
•	Core Context in Phase 3: Phase 3’s prompt references the company name, sector, target region, and the chosen core benefit from Phase 2[4]. We need to add those inputs in Phase 3 if they aren’t already:
•	Company Name, Sector, Target Region: Add these fields to Phase 3 (mirroring Phase 1’s fields). For target region, we can provide the same dropdown options as in Phase 1[5] so the user can select their geography. Use these in the prompt ({{company_name}} in the {{sector}} market in {{target_region}}).
•	Core Benefit: Phase 3 relies on the “core benefit” (was chosen in Phase 2). Introduce a field in Phase 3 for the user’s core benefit keyword or statement. Use this {{core_benefit}} (or reuse the benefit_keyword id) inside Phase 3’s prompt in place of {{phase2.benefit_keyword}}. This ensures Phase 3 can run even if Phase 2 wasn’t done – the user just provides whatever core value proposition they want to validate.
•	Unmet Need & Company Name in Phase 4: Phase 4 originally expects the user to copy an unmet need from the Phase 1 report[2] and knows the company name from Phase 1 as well. We will:
•	Keep the “Key Unmet Need(s) to Address” textarea but adjust its placeholder/help text to not assume it came from Phase 1. For example, “Enter a significant unmet customer need that your product will address.” This lets a standalone user provide any known customer pain point. (They can draw from personal research or Phase 1 if they did it, but it’s not required to mention.)
•	Add Company Name to Phase 4 if the prompt uses it. The Phase 4 prompt begins “You are the lead innovation architect for {{phase1.company_name}}”[6]. We should change that to use a current-phase field. We can add a hidden or visible Company Name field to Phase 4 (and populate it if possible – see autofill below) and use {{company_name}} in the prompt. Alternatively, simply remove the company name from that sentence (“...architect for a new venture” generically) to avoid needing the field. Including the name is nice for personalization, so adding the field is preferable.
•	Weights and Brand Inputs: Phase 4 already has form fields for weighting criteria and brand adjectives, which are self-contained. However, the prompt also expects the competitor matrix CSV from Phase 2 and mentions neutralizing the top competitor. We will not add a field for the CSV (since we’re not handling file upload). Instead, ensure the instructions tell the user to use whatever competitor info they have. For example, in Phase 4’s constraints, we might remove the explicit reference to “highest-scoring threat competitor(s) from the Excel matrix” or mark it as optional. The AI prompt can still mention it, but if no CSV is attached in ChatGPT, the model will do its best. This way Phase 4 can still run; it just may rely on the model’s general knowledge or user-provided notes about competitors.
•	Concept Selection in Phase 5: Phase 5 is about choosing and refining one of the concepts. We must make sure Phase 5 gathers any details it needs without assuming Phase 4’s output is on hand:
•	Include fields for the chosen concept’s key details. For example, Phase 5 should have inputs like “Chosen Concept Code Name”, “Concept’s Core Unmet Need Addressed”, and “Target Audience” if those are referenced later (Phase 8 uses phase5.chosen_concept_code_name, chosen_concept_unmet_need, and concept_target_audience[7]). The user can fill these based on whichever concept they want to proceed with (even if they didn’t generate three in Phase 4, they can originate one here).
•	Use these Phase 5 fields in Phase 5’s prompt template (and later phases) rather than expecting to pull them from Phase 4. For instance, if Phase 5’s AI prompt needs to know the concept chosen, it should refer to the local {{chosen_concept_code_name}} field.
•	Remove any text in Phase 5’s instructions like “pick the concept recommended in Phase 4” – instead, just instruct the user to decide on a concept to finalize. This ensures a team can do Phase 5 standalone by bringing their own idea or an idea from outside.
•	Brand Assets in Phase 6: Phase 6 likely deals with creating marketing assets (e.g. hero image and copy) and might use branding info from earlier:
•	If Phase 6’s prompt or guidance uses the brand colors from Phase 1, we should allow input here. For example, if the AI instructions say “use the brand’s primary color {{phase1.primary_color}} in the design,” we must provide those values now. We can add Primary Color and Secondary Color fields to Phase 6 (color pickers like in Phase 1[8]). Have Phase 6’s prompt use {{primary_color}} and {{secondary_color}} from its own fields instead of pulling Phase 1 data.
•	If Phase 6 references the chosen concept or its value prop/features (likely from Phase 5’s output), ensure Phase 6 has what it needs. It might be that Phase 5 already generated a “Detailed Concept Brief” (copy.docx) that Phase 6 uses. At minimum, Phase 6 knows the chosen concept code name (for creating the hero image with relevant subject) and possibly the core benefit or any slogan. If any such placeholders from Phase 5 exist in Phase 6’s config, replace them with Phase 6 fields or ensure the necessary info from Phase 5 is persisted (the Phase 5 fields added above will persist to DB/localStorage, so Phase 6 can actually still use phase5.something if the user did Phase 5. But since we want no dependency, safer to capture again or instruct user accordingly).
•	For example, if Phase 6 needs a hero image theme, maybe add a field like “Hero Image Theme or Description” for the user to describe what the image should depict (if not already present). This could substitute having to parse Phase 5 output. Essentially, Phase 6 should explicitly ask for any input an isolated user would need to generate their marketing assets (like preferred imagery, tone, any key message). We can leverage the existing context (brand adjectives from Phase 4, concept from Phase 5) when available, but not assume them.
•	Voice/Audio in Phase 7: Phase 7 (voice agent and audio content) must not presume earlier work:
•	If Phase 7 requires a script or content from earlier (e.g. using the elevator pitch or FAQs), we ensure those are asked for. From Phase 8’s checklist, the Elevator Pitch and FAQs are actually collected in Phase 8 fields[9][10], but Phase 7 might instruct creating the voice agent around the concept’s value proposition. We should scan Phase 7’s prompt for placeholders like phase5 or references to research (perhaps it might use a summary of the concept or evidence). If found, introduce fields in Phase 7 for those. For instance, if Phase 7 says “use data from the research dossier (Phase 3) to script the voiceover,” we’d instead let the user provide a “Key Evidence Point for Voiceover” or simply rely on their general input. Adjust Phase 7’s instructions to say “prepare a short script highlighting your concept’s value” rather than telling them to copy text from Phase 3 or 5.
•	The outcome of Phase 7 is likely not a text prompt output but an external action (generating audio via an AI tool). So Phase 7 might be mostly instructional. Just make sure nothing in it forces having done Phase 5 or Phase 3. For example, if the voice agent needs to introduce the company, Phase 7 should either ask for the company name or use the team name (see below about team data). Ensure the company name is accessible here too (we can reuse it from earlier phases via persistence or ask again if needed).
•	Final Website in Phase 8: Phase 8’s prompt heavily aggregates prior inputs (brand adjectives from Phase 4, company name from Phase 1, concept details from Phase 5)[7]. To make Phase 8 standalone:
•	Add any missing fields in Phase 8 for those dependencies. Specifically, Phase 8 should have:
o	Company Name (if not already present from earlier) – used in the brief and brand identity section[7].
o	Brand Adjectives – since Phase 8 (vibey approach) explicitly references {{phase4.brand_adj_1}} etc.[7], we should allow input here as well. Perhaps show three small text fields or a single comma-separated field for brand adjectives if the user hasn’t done Phase 4. We could auto-fill them if Phase 4 data exists, but in standalone mode the user can provide three words that capture their brand’s personality.
o	Chosen Concept Name/Details – Phase 8 uses the concept code name and the unmet need from Phase 5[7]. We should ensure those come from Phase 8’s perspective too. One approach: when the user enters their team code or data, we could fetch Phase 5’s stored chosen concept if it exists. But for independence, it’s easier to just also ask in Phase 8: e.g. have a field for “Product/Concept Name” and “Key Problem it Solves” and “Target Audience” (this overlaps with Phase 5’s fields). Essentially, Phase 8 might duplicate the key concept info one more time to be safe. Since this is the final culmination, it’s okay to ask the user to confirm or input these details again.
•	Adjust the Handlebars template in Phase 8 to use Phase 8’s own fields. For example, in the vibey brief template, instead of {{phase4.brand_adj_1}} etc., use {{brand_adj_1}} from Phase 8’s state (with the new fields). And replace {{phase5.chosen_concept_code_name}} with Phase 8’s concept name field, etc. The conditional logic for detailed vs vibey can remain, but now it will pull from local inputs.
•	Update the Asset Checklist text: It currently lists assets from various phases (hero.png from Phase 6, voice embed from Phase 7, etc.)[11][12]. We should not assume those phases were done. Instead, phrase it as a general checklist: e.g. “Make sure you have the following ready (if you created them): Hero image, website copy document, any audio/podcast files, your voice agent embed code, etc.” This way, a team doing just Phase 8 knows what they might gather on their own before using the AI Website Builder. They could still complete Phase 8 without one or two of these (the AI will just omit missing pieces), but the checklist is a prompt for better results, not a strict requirement tied to prior tasks.
In summary, each phase will have all the input fields it needs to generate its output without implicitly requiring another phase’s completion. We will reuse existing field types (text, textarea, select, color) as needed. The new fields should also have persist: true where appropriate so that if the user does later continue to another phase, those values are stored (more on this below).
Revise Navigation and UI for Non-Sequential Use
We must adjust the user interface cues so that the app no longer pushes a strict sequence, allowing participants to jump in at any activity:
•	Navigation Links: If the app header or sidebar lists phases (activities), ensure they are all accessible regardless of progress. In the current implementation, it looks like a team’s currentPhase was used to track progress, possibly disabling future phase links. For example, the code might only show “Phase 1” link initially and add others as you go. We should remove any such logic. All phase links 1–8 should be visible and clickable at all times for a logged-in team or an anonymous user. This way a user can choose any activity from the menu. (If the NavigationHeader/sidebar doesn’t currently list all phases, we can add a simple dropdown or list of “Activities 1–8” that are not tied to currentPhase.) Essentially, treat them as independent modules rather than a wizard.
•	Progress Indicators: Remove or modify the sequential progress UI elements:
•	The “Phase X of Y” text and progress bar on each phase page should be taken out[13]. Showing “Phase 4 of 8” and a 50% bar implies a necessary order and completion percentage, which is no longer applicable. Instead, the header of the page can simply display the phase number or title. For example, it could say “Activity 4 – Hero Offer Ideation” without suggesting it’s part of a continuous sequence. Alternatively, label them as “Activity 1, Activity 2, … Activity 8” in the UI to reinforce they are standalone exercises.
•	If we keep numbering (to match the content and for instructor reference), ensure it’s presented as an identifier, not a progress step. One idea is to change the wording in the UI from Phase to Activity. For instance, the card that currently shows “Phase {N} of 8” could just say “Activity {N}: {Title}”. This renaming in the user-facing text will help break the mental model of strict order.
•	The “Next” and “Previous” buttons can remain for convenience, but consider whether “Next” should auto-advance a team’s phase in the database (since we won’t strictly use currentPhase as before). It might be fine to keep them for those who do want to follow the original order, as it doesn’t harm independence. However, ensure that clicking “Previous” or “Next” doesn’t trigger any error if the adjacent phase wasn’t filled. It should simply navigate to that page (since all pages are now independent, we don’t need to forbid going to Next if something’s unfilled – though the form validation will still require filling required fields to click Next from within a phase). Essentially, treat Next/Previous as navigation shortcuts rather than progression enforcement.
•	Team Creation Modal Logic: Currently, the app pops up a team selection/creation modal if a user without a team goes to a phase beyond 1 and hasn’t done Phase 1 locally[14]. This is a form of gating that assumes you must either start at Phase 1 or be on a team. We should relax this. Change the condition for showing the TeamModal so it’s not tied specifically to having Phase1 data:
•	One approach: Only prompt the team modal if the user tries to save progress across sessions and isn’t on a team. For example, if someone without a team starts on Activity 4, let them proceed with localStorage without nagging to join/create a team immediately. They should still have the option to create a team (perhaps a button in the nav), but it shouldn’t block usage.
•	Concretely, we can remove !localStorage.getItem('phase1_data') from that check[14]. Instead, perhaps check something more neutral like if (!teamCode && !localStorage.getItem('any_data')) (meaning first-time ever visiting any phase). But even that might be unnecessary. It may be best to not auto-open the team modal at all on phase pages. Let the user decide if they want to create a team (maybe provide a “Save my work / Create Team” prompt in the UI, but not mandatory).
•	By doing this, someone can land on Activity 5, do it anonymously (their answers go to localStorage for that phase only), and leave – which meets the independence goal. If they want to persist across devices or collaborate, they can still create a team manually via a button.
•	Instructions to Users: It might help to add a note on the landing page or at the top of each activity explaining independence. E.g., “You can start with this activity directly. All needed inputs will be collected below.” This sets expectations that it’s self-contained. Also, remove any language like “after completing the previous phase, now do X.” Each page should feel like an entry point.
Adjust Persistence and Progress Tracking
With decoupled activities, how we save and track progress needs adjustment:
•	Auto-Filling Repeat Fields: We are introducing duplicate fields (like Company Name appearing in multiple phases). To improve user experience for those who do go through several activities, we should auto-populate these when possible:
•	Use the existing data loading mechanism (getAllPhaseDataForTeam / getAllLocalStorageData) to fill in default values for new fields. For example, if a team has a company_name from Phase 1 stored, and they go to Phase 2 which now also asks for company name, we can prefill that field with the Phase 1 value. The developer can implement this in the client: after loading allPhaseData, check if formData.company_name is empty and if allPhaseData.phase1.company_name exists, then set the form data for this phase accordingly.
•	Do similar for other repeated inputs (sector, target_region, core benefit, brand colors, brand adjectives, etc.). Essentially, whenever we add a field that corresponds to something originally chosen earlier, we attempt to pre-load it from earlier phase data if available. This is purely a convenience – the user can always modify it, and if they haven’t done the earlier phase it just stays blank for them to fill.
•	This approach means that teams doing phases in order will not have to re-type known info, but those jumping in fresh won’t be hindered. (In code terms, this could be integrated in the useEffect that loads data in PhasePage: after setFormData(currentData), merge in allPhaseData.phaseX values for any matching field IDs if present and if currentData for them is empty.)
•	Persistence Scope: We should verify that saving to localStorage or Replit DB still works per phase. With independence, there’s no change to how data is stored, except now phases later will also store duplicates (e.g., company_name might exist in both phase1_data and phase2_data in local storage). That’s fine. It might be worth distinguishing the field IDs if conflicts could arise, but since we always namespace by phase in storage (the code stores per teamId and phase number), it won’t override anything. So using the same id in multiple phases is okay – it will just be saved under each phase’s record. (It might actually simplify pre-fill, as described, because you can detect the same id in a previous phase’s data.)
•	Completion Tracking: The concept of “latest phase completed” becomes less meaningful. Right now, the Team model has a currentPhase that is updated when you proceed[15]. In an independent model, a team might do out-of-order activities (e.g., only phases 1, 4, and 8). We should decide how to reflect this:
•	One simple change is to redefine currentPhase as “highest-numbered activity completed”. For instance, if a team does 1, skips 2–3, and does 4, we could set currentPhase = 4 (since that’s the highest index they’ve finished). This would at least show they reached activity 4 content. However, a higher number doesn’t necessarily mean they did all previous, so interpreting it as progress percentage is wrong. We should remove the “Progress %” calculation from the admin dashboard CSV[16]. Instead of assuming (currentPhase - 1)/8 completed, we might drop that column or replace it with something else (like “Activities Completed: X/8”). If feasible, we can compute the count of phases with saved data for each team and include that.
•	Ideally, use the markPhaseComplete mechanism to log each completed activity. It looks like a stub for this exists in the backend[17], but it wasn’t fully utilized. We can implement it so that when a user clicks “Next” (or manually indicates completion of an activity), we set a flag in the database for that team and phase. This could be a separate table or a JSONB array in Team record. The developer can choose a simple approach, e.g., add a boolean column for each phase (not elegant but straightforward), or have a TeamPhaseCompletion table with teamId, phaseNumber, completedAt timestamp.
•	The admin dashboard (/admin and the CSV export) should then be updated to display each team’s completion status per activity instead of just one number. For example, the CSV could have columns Phase1, Phase2, … Phase8 with “Done” or a timestamp, or at least a count of how many are done. This way instructors can see which activities the team has actually finished in any order.
•	If implementing per-phase tracking is too large a change, the fallback is to at least interpret currentPhase differently or not at all. Perhaps stop updating currentPhase beyond initial team creation. Or update it only when a higher phase number is completed (as described), but communicate to instructors that it just indicates the furthest one touched, not that all before are done.
•	Admin UI Adjustments: Along with back-end changes, adjust the admin interface so it doesn’t assume linear flow. If the current admin page says “Latest Phase: X”, that could be misleading. It might be better to list “Completed Activities: …” explicitly. For instance, show a checkmark list of 1–8 for each team. Since implementing that in the UI might be non-trivial, as a quick measure the admin CSV could serve as the source of truth (with the changes described above). The key is to avoid a scenario where a team that did only activity 8 is shown as “Phase 8 (100%)” – giving a false impression they did everything. Removing the percentage and perhaps the term “Current Phase” (or renaming it “Highest Activity Reached”) will align the dashboard with the new reality[18].
•	Team and Cohort Workflow: We should verify that the rest of the team/cohort logic still makes sense. Teams can still collaborate on any phase (since their answers are shared via the database). That should work fine – if one member does Activity 3 and another does Activity 5, they’ll both see whatever answers were saved for those when using the same team code. With independent phases, two team members could even tackle different activities in parallel. This is actually a nice benefit. Just ensure no code prevents accessing a higher phase because currentPhase is lower. We’ve addressed the UI aspect; additionally, if there were any server checks like “don’t allow GET /phase-6 data if currentPhase < 5,” those should be removed. (From the routes we saw, /api/configs/phase-X has no such check[19], and /api/teams/:code doesn’t enforce phase, so likely we’re fine.) We might also want to stop automatically updating team.currentPhase on Next, as it’s less relevant. Or we update it in a non-linear way as discussed, but either approach, teams should be free to open any activity.
In summary, these changes will transform the application into eight self-contained modules. Each module collects its own inputs (with optional pre-fills), generates its own outputs, and does not assume the existence of any other module’s output. Navigation and tracking will accommodate this flexibility. After implementing: - Users can start with any activity and never see a “you must do X first” message. - Prompts and instructions will no longer mention other phases by name, so users won’t be confused or feel behind. - Instructors will get a clearer picture of which specific activities a team has completed, rather than a potentially misleading single progress number.
 
[1] [2] [6] phase-4.json
https://github.com/mithorizon7/FoundBootstrapSeparated/blob/509eccc182eb161d345a3655c14f49d1b98818b3/configs/phase-4.json
[3] phase-2.json
https://github.com/mithorizon7/FoundBootstrapSeparated/blob/509eccc182eb161d345a3655c14f49d1b98818b3/configs/phase-2.json
[4] phase-3.json
https://github.com/mithorizon7/FoundBootstrapSeparated/blob/509eccc182eb161d345a3655c14f49d1b98818b3/configs/phase-3.json
[5] [8] phase-1.json
https://github.com/mithorizon7/FoundBootstrapSeparated/blob/509eccc182eb161d345a3655c14f49d1b98818b3/configs/phase-1.json
[7] [9] [10] [11] [12] phase-8.json
https://github.com/mithorizon7/FoundBootstrapSeparated/blob/509eccc182eb161d345a3655c14f49d1b98818b3/configs/phase-8.json
[13] [15] PhasePage.tsx
https://github.com/mithorizon7/FoundBootstrapSeparated/blob/509eccc182eb161d345a3655c14f49d1b98818b3/client/src/components/PhasePage.tsx
[14] Phase.tsx
https://github.com/mithorizon7/FoundBootstrapSeparated/blob/509eccc182eb161d345a3655c14f49d1b98818b3/client/src/pages/Phase.tsx
[16] [17] [18] [19] routes.ts
https://github.com/mithorizon7/FoundBootstrapSeparated/blob/509eccc182eb161d345a3655c14f49d1b98818b3/server/routes.ts
